# Predicciones del modelo exponencial
chd_fit <- a * exp(b * age)  # Aquí se calculan las predicciones del modelo exponencial
chd_fit
# Cargar la librería necesaria
library(ggplot2)
# Crear un data frame con las predicciones
data$exp_pred <- chd_fit
# Graficar los datos y el ajuste del modelo exponencial
ggplot(data, aes(x = age, y = chd)) +
geom_point(color = "blue", size = 2) +
geom_line(aes(y = exp_pred), color = "red", size = 1) +
labs(title = "Ajuste de Regresión Exponencial de la Relación entre Edad y Enfermedad Coronaria",
x = "Edad (age)",
y = "Enfermedad Coronaria (chd)") +
theme_minimal()
# Cargar los datos
data <- read.csv('SAHeart.csv')
# Filtrar datos para evitar log(0)
data <- data[data$chd > 0, ]
# Selección de las variables
sbp <- data$sbp
chd <- data$chd
# Transformación logarítmica de chd
log_chd <- log(chd)
# Ajuste del modelo lineal
model <- lm(log_chd ~ sbp, data = data)
# Resumen del modelo
summary(model)
# Coeficientes del modelo transformado
B0 <- coef(model)[1]  # Intercepto del modelo lineal en la escala transformada
B1 <- coef(model)[2]  # Pendiente del modelo lineal en la escala transformada
# Revertimos la transformación para obtener los coeficientes originales del modelo exponencial
a <- exp(B0)  # Intercepto del modelo exponencial
b <- B1  # Pendiente del modelo exponencial
# Predicciones del modelo exponencial
chd_fit <- a * exp(b * sbp)
# Cargar la librería necesaria
library(ggplot2)
# Crear un data frame con las predicciones
data$exp_pred <- chd_fit
# Graficar los datos y el ajuste del modelo exponencial
ggplot(data, aes(x = sbp, y = chd)) +
geom_point(color = "blue", size = 3) +
geom_line(aes(y = exp_pred), color = "red", size = 1.5) +
labs(title = "Ajuste de Regresión Exponencial de la Relación entre sbp y chd",
x = "Systolic Blood Pressure (sbp)",
y = "Coronary Heart Disease (chd)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 20),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
axis.text = element_text(size = 12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(color = "black"),
legend.position = "none"
)
# Número de puntos de datos
n <- 462
# Generar valores de 'sbp' (Presión arterial sistólica) de manera uniforme en un rango realista
set.seed(123)  # Para reproducibilidad
sbp <- runif(n, min = 100, max = 200)
# Generar valores de 'chd' siguiendo un patrón exponencial con un poco de ruido
a <- 0.05
b <- 0.03
chd <- a * exp(b * sbp) + rnorm(n, mean = 0, sd = 0.1)
# Asegurar que 'chd' sea binario (0 o 1)
chd_binary <- ifelse(chd > 1, 1, 0)
# Crear un data frame con los datos generados
data_sinteticos <- data.frame(sbp = sbp, chd = chd_binary)
# Guardar los datos en un archivo CSV
write.csv(data_sinteticos, 'datos_sinteticos.csv', row.names = FALSE)
# Cargar la librería necesaria
library(ggplot2)
# Crear un data frame con las predicciones del modelo exponencial
data_sinteticos$exp_pred <- a * exp(b * data_sinteticos$sbp)
# Graficar los datos y el ajuste del modelo exponencial
ggplot(data_sinteticos, aes(x = sbp, y = chd)) +
geom_point(color = "blue", size = 3) +
geom_line(aes(y = exp_pred), color = "red", size = 1.5) +
labs(title = "Ajuste de Regresión Exponencial de Datos Sintéticos",
x = "Systolic Blood Pressure (sbp)",
y = "Coronary Heart Disease (chd)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 20),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
axis.text = element_text(size = 12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(color = "black"),
legend.position = "none"
)
# Cargar las librerías necesarias
library(ggplot2)
# Cargar el conjunto de datos
data <- read.csv("path_to_your_file/SAHeart.csv")
# Seleccionar las variables significativas
age <- data$age
sbp <- data$sbp
# Cargar el conjunto de datos
data <- read.csv("SAHeart.csv")
# Seleccionar las variables significativas
age <- data$age
sbp <- data$sbp
# Ajustar el modelo exponencial
model <- nls(sbp ~ a * exp(b * age), start = list(a = 1, b = 0.01), data = data)
# Resumen del modelo
summary(model)
# Visualizar el ajuste del modelo
age_seq <- seq(min(age), max(age), length.out = 100)
sbp_pred <- predict(model, newdata = data.frame(age = age_seq))
ggplot(data, aes(x = age, y = sbp)) +
geom_point() +
geom_line(aes(x = age_seq, y = sbp_pred), color = "blue") +
labs(title = "Modelo Exponencial Ajustado",
x = "Edad",
y = "Presión Arterial Sistólica")
# Cargar las librerías necesarias
library(ggplot2)
# Cargar el conjunto de datos
data <- read.csv("SAHeart.csv")
# Seleccionar las variables significativas
age <- data$age
sbp <- data$sbp
# Ajustar el modelo exponencial
model <- nls(sbp ~ a * exp(b * age), start = list(a = 1, b = 0.01), data = data)
# Resumen del modelo
summary(model)
# Visualizar el ajuste del modelo
age_seq <- seq(min(age), max(age), length.out = 100)
sbp_pred <- predict(model, newdata = data.frame(age = age_seq))
ggplot(data, aes(x = age, y = sbp)) +
geom_point() +
geom_line(aes(x = age_seq, y = sbp_pred), color = "blue") +
labs(title = "Modelo Exponencial Ajustado",
x = "Edad",
y = "Presión Arterial Sistólica")
# Cargar las librerías necesarias
library(ggplot2)
# Cargar el conjunto de datos
data <- read.csv("SAHeart.csv")
# Seleccionar las variables significativas
age <- data$age
sbp <- data$sbp
# Ajustar el modelo exponencial
model <- nls(sbp ~ a * exp(b * age), start = list(a = 1, b = 0.01), data = data)
# Resumen del modelo
summary(model)
# Generar secuencia de edades para la predicción
age_seq <- seq(min(age), max(age), length.out = 100)
sbp_pred <- predict(model, newdata = data.frame(age = age_seq))
# Crear un dataframe para la predicción
predicted_data <- data.frame(age = age_seq, sbp = sbp_pred)
# Visualizar el ajuste del modelo
ggplot(data, aes(x = age, y = sbp)) +
geom_point() +
geom_line(data = predicted_data, aes(x = age, y = sbp), color = "blue") +
labs(title = "Modelo Exponencial Ajustado",
x = "Edad",
y = "Presión Arterial Sistólica")
# Cargar las librerías necesarias
library(ggplot2)
# Cargar el conjunto de datos modificado
data <- read.csv("enfermedades.csv")
# Variables independientes y dependientes
x <- data$age
y <- data$sbp
# Transformación logarítmica de y
log_y <- log(y)
# Ajuste del modelo lineal
model <- lm(log_y ~ x)
# Resumen del modelo
summary(model)
# Coeficientes del modelo transformado
B0 <- coef(model)[1]  # Intercepto del modelo lineal en la escala transformada
B1 <- coef(model)[2]  # Pendiente del modelo lineal en la escala transformada
B0
B1
# Revertimos la transformación para obtener los coeficientes originales del modelo exponencial
a <- exp(B0)  # Intercepto del modelo exponencial
b <- B1  # Pendiente del modelo exponencial
a
b
# Predicciones del modelo exponencial
y_fit <- a * exp(b * x)
# Visualización de los datos y el ajuste exponencial
plot(x, y, main = "Ajuste de Regresión Exponencial", xlab = "Edad (años)", ylab = "Presión Arterial Sistólica (sbp_mod)", pch = 19)
lines(x, y_fit, col = "red")
legend("topleft", legend = c("Datos originales", "Ajuste exponencial"), col = c("black", "red"), pch = 19, lty = 1, lwd = 2)
# Cargar el conjunto de datos modificado
data <- read.csv("enfermedades.csv")
# Variables independientes y dependientes
x <- data$age
y <- data$sbp
# Transformación logarítmica de y
log_y <- log(y)
# Ajuste del modelo lineal
model <- lm(log_y ~ x)
# Resumen del modelo
summary(model)
# Coeficientes del modelo transformado
B0 <- coef(model)[1]  # Intercepto del modelo lineal en la escala transformada
B1 <- coef(model)[2]  # Pendiente del modelo lineal en la escala transformada
B0
B1
# Revertimos la transformación para obtener los coeficientes originales del modelo exponencial
a <- exp(B0)  # Intercepto del modelo exponencial
b <- B1  # Pendiente del modelo exponencial
a
b
# Predicciones del modelo exponencial
y_fit <- a * exp(b * x)
y_fit
# Visualización de los datos y el ajuste exponencial
plot(x, y, main = "Ajuste de Regresión Exponencial", xlab = "Edad (años)", ylab = "Presión Arterial Sistólica (sbp_mod)", pch = 19)
lines(x, y_fit, col = "red")
legend("topleft", legend = c("Datos originales", "Ajuste exponencial"), col = c("black", "red"), pch = 19, lty = 1, lwd = 2)
plot(x,y)
plot(y, x)
plot(x, y)
# Cargar el conjunto de datos modificado
data <- read.csv("SAHeart.csv")
# Variables independientes y dependientes
x <- data$age
y <- data$sbp
plot(x, y)
# Cargar el conjunto de datos modificado
data <- read.csv("ejemp.csv")
# Variables independientes y dependientes
x <- data$age
y <- data$sbp
plot(x, y)
# Cargar las librerías necesarias
library(ggplot2)
# Cargar el conjunto de datos modificado
data <- read.csv("ejemp.csv")
# Ajustar el modelo exponencial
modelo <- nls(sbp ~ a * exp(b * age), start = list(a = 50, b = 0.05), data = data)
# Generar una secuencia de edades para la predicción
age_seq <- seq(min(data$age), max(data$age), length.out = 100)
sbp_pred <- predict(modelo, newdata = data.frame(age = age_seq))
# Crear un dataframe para la predicción
pred_data <- data.frame(age = age_seq, sbp = sbp_pred)
# Crear el gráfico de dispersión con los datos modificados
ggplot(data, aes(x = age, y = sbp)) +
geom_point(color = "red") +
geom_line(data = pred_data, aes(x = age, y = sbp), color = "black") +
labs(title = "Modelo Exponencial Ajustado con Datos Modificados",
x = "Edad",
y = "Presión Arterial Sistólica") +
theme_minimal()
# Cargar las librerías necesarias
library(ggplot2)
# Cargar el conjunto de datos modificado
data <- read.csv("ejemp.csv")
# Ajustar el modelo exponencial
modelo <- nls(sbp ~ a * exp(b * age), start = list(a = 50, b = 0.05), data = data)
# Generar una secuencia de edades para la predicción
age_seq <- seq(min(data$age), max(data$age), length.out = 100)
sbp_pred <- predict(modelo, newdata = data.frame(age = age_seq))
# Crear un dataframe para la predicción
pred_data <- data.frame(age = age_seq, sbp = sbp_pred)
# Crear el gráfico de dispersión con los datos modificados
ggplot(data, aes(x = age, y = sbp)) +
geom_point(color = "red") +
geom_line(data = pred_data, aes(x = age, y = sbp), color = "black") +
labs(title = "Modelo Exponencial Ajustado con Datos Modificados",
x = "Edad",
y = "Presión Arterial Sistólica") +
theme_minimal()
# Cargar las librerías necesarias
library(ggplot2)
# Cargar el conjunto de datos modificado
data <- read.csv("ejemp.csv")
# Ajustar el modelo exponencial
modelo <- nls(sbp ~ a * exp(b * age), start = list(a = 50, b = 0.05), data = data)
# Generar una secuencia de edades para la predicción
age_seq <- seq(min(data$age), max(data$age), length.out = 100)
sbp_pred <- predict(modelo, newdata = data.frame(age = age_seq))
# Crear un dataframe para la predicción
pred_data <- data.frame(age = age_seq, sbp = sbp_pred)
# Crear el gráfico de dispersión con los datos modificados
ggplot(data, aes(x = age, y = sbp)) +
geom_point(color = "red") +
geom_line(data = pred_data, aes(x = age, y = sbp), color = "black") +
labs(title = "Modelo Exponencial Ajustado con Datos Modificados",
x = "Edad",
y = "Presión Arterial Sistólica") +
theme_minimal()
# Cargar las librerías necesarias
library(ggplot2)
# Cargar el conjunto de datos modificado
data <- read.csv("ejemp.csv")
# Ajustar el modelo exponencial
modelo <- nls(sbp ~ a * exp(b * age), start = list(a = 50, b = 0.05), data = data)
# Generar una secuencia de edades para la predicción
age_seq <- seq(min(data$age), max(data$age), length.out = 100)
sbp_pred <- predict(modelo, newdata = data.frame(age = age_seq))
# Crear un dataframe para la predicción
pred_data <- data.frame(age = age_seq, sbp = sbp_pred)
# Crear el gráfico de dispersión con los datos modificados
ggplot(data, aes(x = age, y = sbp)) +
geom_point(color = "red") +
geom_line(data = pred_data, aes(x = age, y = sbp), color = "black") +
labs(title = "Modelo Exponencial Ajustado con Datos Modificados",
x = "Edad",
y = "Presión Arterial Sistólica") +
theme_minimal()
# Cargar las librerías necesarias
library(ggplot2)
# Cargar el conjunto de datos modificado
data <- read.csv("ejemp.csv")
# Ajustar el modelo exponencial
modelo <- nls(sbp ~ a * exp(b * age), start = list(a = 50, b = 0.05), data = data)
# Generar una secuencia de edades para la predicción
age_seq <- seq(min(data$age), max(data$age), length.out = 100)
sbp_pred <- predict(modelo, newdata = data.frame(age = age_seq))
# Crear un dataframe para la predicción
pred_data <- data.frame(age = age_seq, sbp = sbp_pred)
# Crear el gráfico de dispersión con los datos modificados
ggplot(data, aes(x = age, y = sbp)) +
geom_point(color = "red") +
geom_line(data = pred_data, aes(x = age, y = sbp), color = "black") +
labs(title = "Modelo Exponencial Ajustado con Datos Modificados",
x = "Edad",
y = "Presión Arterial Sistólica") +
theme_minimal()
# Cargar los datos modificados desde un archivo CSV
data <- read.csv("enfermedades.csv")
# Transformación logarítmica de la presión arterial sistólica
log_sbp <- log(data$sbp)
# Ajuste del modelo lineal
model <- lm(log_sbp ~ data$age)
# Resumen del modelo
summary(model)
# Coeficientes del modelo transformado
B0 <- coef(model)[1]  # Intercepto del modelo lineal en la escala transformada
B1 <- coef(model)[2]  # Pendiente del modelo lineal en la escala transformada
# Revertimos la transformación para obtener los coeficientes originales del modelo exponencial
a <- exp(B0)  # Intercepto del modelo exponencial
b <- B1  # Pendiente del modelo exponencial
# Predicciones del modelo exponencial
data$sbp_fit <- a * exp(b * data$age)
# Visualización de los datos y el ajuste exponencial
plot(data$age, data$sbp, main = "Modelo Exponencial Ajustado con Datos Modificados",
xlab = "Edad", ylab = "Presión Arterial Sistólica", pch = 19, col = "red")
lines(data$age, data$sbp_fit, col = "black", lwd = 2)
legend("topleft", legend = c("Datos originales", "Ajuste exponencial"), col = c("red", "black"), pch = 19, lty = 1, lwd = 2)
# Predicciones del modelo exponencial
data$sbp_fit <- a * exp(b * data$age)
# Visualización de los datos y el ajuste exponencial
plot(data$age, data$sbp, main = "Modelo Exponencial Ajustado con Datos Modificados",
xlab = "Edad", ylab = "Presión Arterial Sistólica", pch = 19, col = "red")
# F = y
# v = x
# Datos observados
x <- c(10, 20, 30, 40, 50, 60, 70, 80)
y <- c(25, 70, 380, 550, 610, 1220, 830, 1450)
# Transformación logarítmica de F
log_y <- log(y)
# Ajuste del modelo lineal
model <- lm(log_y ~ x)
# Resumen del modelo
summary(model)
# Coeficientes del modelo transformado
B0 <- coef(model)[1]  # Intercepto del modelo lineal en la escala transformada
B1 <- coef(model)[2]  # Pendiente del modelo lineal en la escala transformada
B0
B1
# Revertimos la transformación para obtener los coeficientes originales del modelo exponencial
a <- exp(B0)  # Intercepto del modelo exponencial
b <- B1  # Pendiente del modelo exponencial
a
b
# Predicciones del modelo exponencial
y_fit <- a * exp(b * x)
y_fit
# Visualización de los datos y el ajuste exponencial
plot(x, y, main = "Ajuste de Regresión Exponencial", xlab = "Velocidad (m/s)", ylab = "Fuerza (N)", pch = 19)
lines(x, y_fit, col = "red")
legend("topleft", legend = c("Datos originales", "Ajuste exponencial"), col = c("black", "red"), pch = 19, lty = 1, lwd = 2)
# Datos observados
x <- c(10, 20, 30, 40, 50, 60, 70, 80)
y <- c(25, 70, 380, 550, 610, 1220, 830, 1450)
# Transformación inversa
inv_y <- 1 / y
inv_x <- 1 / x
# Ajuste del modelo lineal a la transformación inversa
model_saturation <- lm(inv_y ~ inv_x)
# Resumen del modelo
summary(model_saturation)
# Coeficientes del modelo transformado
coef_saturation <- coef(model_saturation)
coef_saturation
B0 <- coef_saturation[1]# Intercepto del modelo lineal en la escala transformada
B1 <- coef_saturation[2]  # Pendiente del modelo lineal en la escala transformada
B0
B1
# Revertimos la transformación para obtener los coeficientes originales del modelo de saturación
a <- 1 / B0  # Coeficiente del numerador
b <- B1 / B0  # Coeficiente del denominador
a
b
# Predicciones del modelo de saturación
y_fit_saturation <- a * x / (b + x)
# Visualización de los datos y el ajuste del modelo de saturación
plot(x, y, main = "Ajuste del Modelo de Saturación", xlab = "Velocidad (m/s)", ylab = "Fuerza (N)", pch = 19)
lines(x, y_fit_saturation, col = "red")
legend("topleft", legend = c("Datos originales", "Ajuste de saturación"), col = c("black", "red"), pch = 19, lty = 1, lwd = 2)
# Mostrar los coeficientes
cat("Coeficiente alpha3:", a, "\n")
cat("Coeficiente beta3:", b, "\n")
# Cargar los datos modificados desde un archivo CSV
data <- read.csv("enfermedades.csv")
# Transformación logarítmica de la presión arterial sistólica
log_sbp <- log(data$sbp)
# Ajuste del modelo lineal
model <- lm(log_sbp ~ data$age)
# Resumen del modelo
summary(model)
# Coeficientes del modelo transformado
B0 <- coef(model)[1]  # Intercepto del modelo lineal en la escala transformada
B1 <- coef(model)[2]  # Pendiente del modelo lineal en la escala transformada
# Revertimos la transformación para obtener los coeficientes originales del modelo exponencial
a <- exp(B0)  # Intercepto del modelo exponencial
b <- B1  # Pendiente del modelo exponencial
# Predicciones del modelo exponencial
data$sbp_fit <- a * exp(b * data$age)
# Visualización de los datos y el ajuste exponencial
plot(data$age, data$sbp, main = "Modelo Exponencial Ajustado con Datos Modificados",
xlab = "Edad", ylab = "Presión Arterial Sistólica", pch = 19, col = "red")
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
library(car)  # Para realizar pruebas de normalidad
install.packages('car')
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
library(car)  # Para realizar el Q-Q plot de los residuos
# Cargar los datos modificados desde un archivo CSV
data <- read.csv("ruta/al/archivo/modified_provided_data.csv")
# Ajustar el modelo de regresión exponencial
fit <- nls(sbp ~ beta0 * exp(beta1 * age), data = data, start = list(beta0 = 10, beta1 = 0.2))
# Resumen del modelo
summary(fit)
# Obtener los coeficientes ajustados
coef(fit)
# Crear un rango de valores para age para la predicción
age_new <- seq(min(data$age), max(data$age), length.out = 100)
# Predecir valores de sbp utilizando el modelo ajustado
sbp_pred <- predict(fit, newdata = list(age = age_new))
# Crear un nuevo dataframe para las predicciones
pred_data <- data.frame(age = age_new, sbp = sbp_pred)
# Graficar los datos originales y la curva ajustada
ggplot(data, aes(x = age, y = sbp)) +
geom_point(color = "red") +
geom_line(data = pred_data, aes(x = age, y = sbp), color = "black") +
labs(title = "Modelo Exponencial Ajustado con Datos Modificados",
x = "Edad",
y = "Presión Arterial Sistólica") +
theme_minimal()
# Obtener los residuos del modelo
residuos <- residuals(fit)
# Graficar el Q-Q plot de los residuos
qqPlot(residuos, main="Q-Q Plot de los Residuos")
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
library(car)  # Para realizar el Q-Q plot de los residuos
install.packages("car")
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
# Cargar los datos modificados desde un archivo CSV
data <- read.csv("ruta/al/archivo/modified_provided_data.csv")
# Cargar los datos modificados desde un archivo CSV
data <- read.csv("enfermedades.csv")
# Ajustar el modelo de regresión exponencial
fit <- nls(sbp ~ beta0 * exp(beta1 * age), data = data, start = list(beta0 = 10, beta1 = 0.2))
# Resumen del modelo
summary(fit)
# Obtener los coeficientes ajustados
coef(fit)
# Crear un rango de valores para age para la predicción
age_new <- seq(min(data$age), max(data$age), length.out = 100)
# Predecir valores de sbp utilizando el modelo ajustado
sbp_pred <- predict(fit, newdata = list(age = age_new))
# Crear un nuevo dataframe para las predicciones
pred_data <- data.frame(age = age_new, sbp = sbp_pred)
# Graficar los datos originales y la curva ajustada
ggplot(data, aes(x = age, y = sbp)) +
geom_point(color = "red") +
geom_line(data = pred_data, aes(x = age, y = sbp), color = "black") +
labs(title = "Modelo Exponencial Ajustado con Datos Modificados",
x = "Edad",
y = "Presión Arterial Sistólica") +
theme_minimal()
# Obtener los residuos del modelo
residuos <- residuals(fit)
# Graficar el Q-Q plot de los residuos usando ggplot2
qqplot <- ggplot(data.frame(residuos), aes(sample = residuos)) +
stat_qq() +
stat_qq_line() +
labs(title = "Q-Q Plot de los Residuos")
# Mostrar el Q-Q plot
print(qqplot)
